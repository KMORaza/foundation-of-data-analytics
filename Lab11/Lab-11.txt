Q1] Consider the following pandas DataFrame: 
import pandas as pd 
data = {'Name': ['John', 'Emily', 'Michael', 'Jessica'], 
        'Age': [25, 28, 32, 30], 
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston'], 
        'Salary': [50000, 60000, 70000, 55000]} 
df = pd.DataFrame(data) 
1. Introducing Pandas Objects: 
   a) Print the entire DataFrame `df` and observe its structure and contents. 
   b) Determine and print the shape of the DataFrame `df`. 
   c) Identify the data types of each column in the DataFrame `df` and print the results. 
2. Data Indexing and Selection: 
   a) Access and print the 'Name' column of the DataFrame `df`. 
   b) Access and print the second row of the DataFrame `df`. 
   c) Access and print the salary of the employee with the name 'Michael'. 
   d) Create a new DataFrame `df_filtered` that includes only the rows where the age is greater than 27. Print the new DataFrame.

Q2] Consider the following pandas DataFrame: 
import pandas as pd 
data = {'Name': ['John', 'Emily', 'Michael', 'Jessica'], 
        'Age': [25, 28, 32, 30], 
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston'], 
        'Salary': [50000, 60000, 70000, 55000]} 
df = pd.DataFrame(data) 
1. Operating on Data in Pandas: 
   a) Calculate and print the mean age of the employees in the DataFrame `df`. 
   b) Calculate and print the total salary of all employees in the DataFrame `df`. 
   c) Calculate and print the maximum salary among all employees in the DataFrame `df`. 
2. Data Manipulation: 
   a) Add a new column named 'Bonus' to the DataFrame `df` with random bonus values between 1000 and 5000 for each employee. Print the modified DataFrame. 
   b) Increase the salary of all employees in the DataFrame `df` by 10%. Print the updated salary column. 
3. Data Aggregation: 
   a) Group the DataFrame `df` by the 'City' column and calculate the average age for each city. Print the resulting DataFrame. 
   b) Group the DataFrame `df` by the 'City' column and calculate the total salary for each city. Print the resulting DataFrame.

Q3] Consider the following pandas DataFrame: 
import pandas as pd 
import numpy as np 
data = {'Name': ['John', 'Emily', np.nan, 'Jessica'], 
        'Age': [25, np.nan, 32, 30], 
        'City': ['New York', 'Los Angeles', 'Chicago', np.nan], 
        'Salary': [50000, 60000, np.nan, 55000]} 
df = pd.DataFrame(data) 
1. Detection of Missing Data: 
   a) Identify and print the total number of missing values in each column of the DataFrame `df`. 
   b) Determine and print the percentage of missing values in the 'Age' column. 
2. Handling of Missing Data: 
   a) Remove any rows that contain missing values from the DataFrame `df` and assign the result to a new DataFrame `df_clean`. Print the new DataFrame. 
   b) Fill the missing values in the 'Salary' column of the DataFrame `df` with the mean salary value. Print the modified DataFrame.

Q4] Consider the following pandas DataFrame: 
import pandas as pd 
import numpy as np 
data = {'Name': ['John', 'Emily', np.nan, 'Jessica'], 
        'Age': [25, np.nan, 32, 30], 
        'City': ['New York', 'Los Angeles', 'Chicago', np.nan], 
        'Salary': [50000, 60000, np.nan, 55000]} 
df = pd.DataFrame(data) 
1. Detection of Missing Data: 
   a) Identify and print the total number of missing values in each column of the DataFrame `df`. 
   b) Determine and print the percentage of missing values in the 'Age' column. 
2. Handling of Missing Data: 
   a) Remove any rows that contain missing values from the DataFrame `df` and assign the result to a new DataFrame `df_clean`. Print the new DataFrame. 
   b) Fill the missing values in the 'Salary' column of the DataFrame `df` with the mean salary value. Print the modified DataFrame.

Q5] Consider the following pandas DataFrame: 
import pandas as pd 
data = {'Group': ['A', 'A', 'B', 'B', 'C', 'C'], 
        'Category': ['X', 'Y', 'X', 'Y', 'X', 'Y'], 
        'Value': [10, 20, 30, 40, 50, 60]} 
df = pd.DataFrame(data) 
df = df.set_index(['Group', 'Category']) 
1. Hierarchical Indexing: 
   a) Print the DataFrame `df` and observe its structure with the hierarchical index. 
   b) Access and print the value corresponding to Group 'A' and Category 'X'. 
   c) Access and print the sub-dataframe corresponding to all rows with Group 'B'.

Q6] Consider the following example dataset: 
import pandas as pd 
data = {'Year': [2015, 2016, 2017, 2018, 2019, 2020], 
        'Sales': [100, 150, 200, 180, 220, 250], 
        'Profit': [10, 20, 25, 15, 30, 35]} 
df = pd.DataFrame(data) 
1. Visualization with Matplotlib 
   a) Create a line plot to visualize the trend of sales over the years. Add appropriate labels and title to the plot. 
   b) Create a bar plot to compare the sales and profit for each year. Add appropriate labels and title to the plot. 
   c) Create a scatter plot to show the relationship between sales and profit. Add appropriate labels and title to the plot. 
   d) Create a box plot to display the distribution of sales and profit. Add appropriate labels and title to the plot. 
   e) Create a histogram to visualize the distribution of sales. Add appropriate labels and title to the plot. 
   f) Create a pie chart to represent the proportion of sales for each year. Add appropriate labels and title to the plot.

Q7] Consider the following pandas Series: 
import pandas as pd 
series = pd.Series(['apple', 'banana', 'cherry', 'durian', 'elderberry']) 
1. Vectorized String Operations: 
   a) Convert all the strings in the Series `series` to uppercase. Print the modified Series. 
   b) Determine the length of each string in the Series `series`. Print the resulting Series. 
   c) Check if each string in the Series `series` contains the letter 'a'. Print the resulting Series of boolean values. 
   d) Replace all occurrences of the letter 'a' in each string of the Series `series` with the letter 'x'. Print the modified Series. 
   e) Extract the substring consisting of the first three characters from each string in the Series `series`. Print the resulting Series. 
   f) Count the number of occurrences of the letter 'r' in each string of the Series `series`. Print the resulting Series.
